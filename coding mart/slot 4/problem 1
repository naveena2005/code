The super digit of a number is obtained by repeatedly summing its digits until a single-digit
number is reached.
Given an integer N, your task is to compute its super digit using this process.
Example Scenarios
Scenario 1
Input:
N = 9875
Explanation:
1. 9 + 8 + 7 + 5 = 29
2. 2 + 9 = 11
3. 1 + 1 = 2
4. Since 2 is a single digit, the super digit is 2.
Output:
2

CODING 

class Solution {
    public int addDigits(int n) {
        if(n>=0 && n<=9)return n;
        int sum=0;
        while(n>9){
            int t=n;
            sum=0;
            while(t!=0){
                int res=t%10;
                sum+=res;
                t=t/10;
            }
            n=sum;
        }
        return n;
    }
}
Time Complexity is 	O(logÂ² n)

class Solution {
    public int addDigits(int num) {
        if (num == 0) return 0; // If the number is 0, the result is 0.  Base case.
        else if (num % 9 != 0) return num % 9; // If the number isn't divisible by 9, the result is the remainder when divided by 9. 
        else return 9; // If the number is divisible by 9 (and not 0), the result is 9. 
    }
}

Time Complexity: O(1)
