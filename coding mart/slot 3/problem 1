Given an array of strings queries and a string pattern, return a boolean array answer where
answer[i] is true if queries[i] matches pattern, and false otherwise.
A query word queries[i] matches pattern if you can insert lowercase English letters into the
pattern so that it equals the query. You may insert a character at any position in pattern or
you may choose not to insert any characters at all.

Example 1:
Input:
queries = ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"],
pattern = "FB"
Output: [true,false,true,true,false]
Explanation: "FooBar" can be generated like this "F" + "oo" + "B" + "ar".
"FootBall" can be generated like this "F" + "oot" + "B" + "all".
"FrameBuffer" can be generated like this "F" + "rame" + "B" + "uffer".

CODING

class Solution {
    static boolean pat(String s,String p){
        int n=s.length();
        if(n<p.length())return false;
        int j=0;
        for(int i=0;i<n;i++){
            char q=s.charAt(i);
            if(j<p.length() && q==p.charAt(j)){
                j++;
            }else if(Character.isUpperCase(q)){
                return false;
            }
        }
        return j==p.length();
    }
    public List<Boolean> camelMatch(String[] queries, String pattern) {
        List<Boolean> b=new ArrayList<>();
        for(String s:queries){
            b.add(pat(s,pattern));
        }
        return b;
    }
}
